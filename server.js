import express from "express";
import { Pool } from "pg";
import cors from "cors";
import nodemailer from "nodemailer";
import dotenv from "dotenv";
import axios from "axios";
import path from "path";
import { fileURLToPath } from "url";
import config from "./config.js"; // –ü–æ–¥–∫–ª—é—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥
import { v4 as uuidv4 } from 'uuid'; // –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ UUID

dotenv.config();

// –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Ç–µ–∫—É—â–µ–º—É —Ñ–∞–π–ª—É –∏ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const app = express();
const db = new Pool(config.db);

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ CORS
app.use(cors({
  origin: ["https://region42.onrender.com", "http://localhost:8080"], // —è–≤–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—à—å –¥–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ—Ä–æ–Ω—Ç
  methods: ["GET", "POST"],
  allowedHeaders: ["Content-Type"],
}));


// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ JSON
app.use(express.json());

// –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î
db.connect((err) => {
  if (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î:", err);
    process.exit(1);
  }
  console.log("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ PostgreSQL");
});

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ—á—Ç—ã
const transporter = nodemailer.createTransport({
  host: config.smtp.host,
  port: config.smtp.port,
  secure: config.smtp.port === 465,
  auth: {
    user: config.smtp.user,
    pass: config.smtp.pass,
  },
});

// API: –ü—Ä–∏—ë–º –∑–∞—è–≤–æ–∫
app.post("/api/applications", (req, res) => {
  const { name, email, number, address, description } = req.body;

  if (!name || !email || !number || !address || !description) {
    return res.status(400).json({ error: "–í—Å–µ –ø–æ–ª—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω—ã!" });
  }

  const sql = `
    INSERT INTO applications (name, email, number, address, description)
    VALUES ($1, $2, $3, $4, $5)
  `;

  db.query(sql, [name, email, number, address, description], (err) => {
    if (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –ë–î:", err);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }

    res.json({ message: "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!" });

    const mailOptions = {
      from: config.smtp.user,
      to: email,
      subject: "–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏",
      text: `–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, ${name}!\n\n–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞.\n\n–î–µ—Ç–∞–ª–∏:\n- –ê–¥—Ä–µ—Å: ${address}\n- –¢–µ–ª–µ—Ñ–æ–Ω: ${number}\n- –û–ø–∏—Å–∞–Ω–∏–µ: ${description}\n\n–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏.\n\n–° —É–≤–∞–∂–µ–Ω–∏–µ–º, –∫–æ–º–∞–Ω–¥–∞.`,
    };

    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–∏—Å—å–º–∞:", error);
      } else {
        console.log("üì© –ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ:", info.response);
      }
    });
  });
});

// API: –ü–æ–¥—Å–∫–∞–∑–∫–∏ –∞–¥—Ä–µ—Å–æ–≤ —á–µ—Ä–µ–∑ –Ø–Ω–¥–µ–∫—Å
app.get("/api/suggest", async (req, res) => {
  const { query, type } = req.query;

  if (!query || !type) {
    return res.status(400).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã query –∏ type" });
  }

  try {
    const response = await axios.get("https://suggest-maps.yandex.ru/v1/suggest", {
      params: {
        apikey: config.apis.yandexApiKey,
        text: query,
        lang: "ru_RU",
        types: type,
      },
    });

    const suggestions = response.data.results.map(item => item.title.text);
    res.json({ suggestions });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –Ø–Ω–¥–µ–∫—Å API:", error.message);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ –Ø–Ω–¥–µ–∫—Å API" });
  }
});

// API: –ü–æ–¥—Å–∫–∞–∑–∫–∏ –§–ò–û —á–µ—Ä–µ–∑ Dadata
app.get("/api/suggest-fio", async (req, res) => {
  const { query } = req.query;

  if (!query) {
    return res.status(400).json({ error: "–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä query" });
  }

  try {
    const response = await axios.post(
      "https://suggestions.dadata.ru/suggestions/api/4_1/rs/suggest/fio",
      { query },
      {
        headers: {
          Authorization: `Token ${config.apis.dadataApiKey}`,
        },
      }
    );

    const suggestions = Array.isArray(response.data.suggestions) ? response.data.suggestions : [];
    res.json({ suggestions });
  } catch (error) {
    console.error("‚ùå –û—à–∏–±–∫–∞ Dadata API:", error.message);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ Dadata API" });
  }
});

app.post("/api/login", async (req, res) => {
  const { loginType, city, street, house, apartment, contract, accountNumber } = req.body;

  console.log("–ó–∞–ø—Ä–æ—Å –Ω–∞ –ª–æ–≥–∏–Ω:", req.body);

  let query = "";
  let values = [];

  try {
    if (loginType === "address") {
      if (!city || !street || !house || !apartment || !contract) {
        return res.status(400).json({ error: "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤—Ö–æ–¥–∞ –ø–æ –∞–¥—Ä–µ—Å—É" });
      }

      query = `
        SELECT user_id, is_special_user FROM users
        WHERE city = $1 AND street = $2 AND house = $3 AND apartment = $4 AND contract_number = $5
      `;
      values = [city, street, house, apartment, contract];

    } else if (loginType === "account") {
      if (!accountNumber) {
        return res.status(400).json({ error: "–ù–µ —É–∫–∞–∑–∞–Ω –Ω–æ–º–µ—Ä –ª–∏—Ü–µ–≤–æ–≥–æ —Å—á—ë—Ç–∞" });
      }

      query = `
        SELECT user_id, is_special_user FROM users
        WHERE account_number = $1
      `;
      values = [accountNumber];

    } else {
      return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π —Ç–∏–ø –ª–æ–≥–∏–Ω–∞" });
    }

    console.log("SQL-–∑–∞–ø—Ä–æ—Å:", query);
    console.log("–ó–Ω–∞—á–µ–Ω–∏—è:", values);

    const result = await db.query(query, values);
    console.log("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞:", result.rows);

    if (result.rows.length > 0) {
      const user = result.rows[0];
      return res.json({
        success: true,
        userId: user.user_id,
        isSpecialUser: Boolean(user.is_special_user),
      });
    } else {
      return res.status(401).json({ success: false, error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ:", err);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –ª–æ–≥–∏–Ω–µ", details: err.message });
  }
});


// –ü—Ä–∏–º–µ—Ä API –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ –ª–∏—Ü–µ–≤–æ–º—É —Å—á–µ—Ç—É
app.post('/api/getUserAddress', async (req, res) => {
  const { accountNumber } = req.body;
  try {
    const user = await User.findOne({ accountNumber });
    console.log(user); // –õ–æ–≥–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if (user) {
      res.json({
        city: user.city,
        street: user.street,
        house: user.house,
        apartment: user.apartment
      });
    } else {
      res.status(404).json({ message: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' });
    }
  } catch (error) {
    res.status(500).json({ message: '–û—à–∏–±–∫–∞ –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ' });
  }
});

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –≤—Å–µ—Ö –Ω–æ–≤–æ—Å—Ç–µ–π
app.get("/api/news", (req, res) => {
  db.query("SELECT * FROM news ORDER BY created_at DESC", (err, results) => {
    if (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–æ–≤–æ—Å—Ç–µ–π:", err);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }
    res.json(results.rows);
  });
});

// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ (—Ç–æ–ª—å–∫–æ –¥–ª—è specialUser)
app.post("/api/news", (req, res) => {
  const { title, content, userId } = req.body;
  
  if (!title || !content || !userId) {
    return res.status(400).json({ error: "–ó–∞–≥–æ–ª–æ–≤–æ–∫, —Ç–µ–∫—Å—Ç –∏ userId –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  const checkUserQuery = "SELECT is_special_user FROM users WHERE user_id = $1";
  db.query(checkUserQuery, [userId], (err, results) => {
    if (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }

    if (results.rows.length === 0 || !results.rows[0].is_special_user) {
      return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π" });
    }

    const insertQuery = "INSERT INTO news (title, content) VALUES ($1, $2)";
    db.query(insertQuery, [title, content], (err) => {
      if (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏:", err);
        return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
      }
      console.log("‚úÖ –ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞!");
      res.json({ success: true, message: "–ù–æ–≤–æ—Å—Ç—å –¥–æ–±–∞–≤–ª–µ–Ω–∞" });
    });
  });
});

// –ú–∞—Ä—à—Ä—É—Ç –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–∏
app.delete("/api/news/:id", (req, res) => {
  const { id } = req.params;  // –ü–æ–ª—É—á–∞–µ–º ID –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ URL
  const { userId } = req.query; // –ü–æ–ª—É—á–∞–µ–º userId –∏–∑ query-–ø–∞—Ä–∞–º–µ—Ç—Ä–∞

  if (!userId) {
    return res.status(400).json({ error: "–ù–µ —É–∫–∞–∑–∞–Ω userId" });
  }

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Å–æ–±—ã–º (specialUser)
  const checkUserQuery = "SELECT is_special_user FROM users WHERE user_id = $1";
  db.query(checkUserQuery, [userId], (err, results) => {
    if (err) {
      console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:", err);
      return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
    }

    if (results.rows.length === 0 || !results.rows[0].is_special_user) {
      return res.status(403).json({ error: "–ù–µ—Ç –ø—Ä–∞–≤ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π" });
    }

    // –£–¥–∞–ª–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    const deleteQuery = "DELETE FROM news WHERE id = $1";
    db.query(deleteQuery, [id], (err) => {
      if (err) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏:", err);
        return res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –Ω–æ–≤–æ—Å—Ç–∏" });
      }
      res.json({ success: true, message: "–ù–æ–≤–æ—Å—Ç—å —É–¥–∞–ª–µ–Ω–∞" });
    });
  });
});

app.post('/api/user/profile', async (req, res) => {
  console.log('–ó–∞–ø—Ä–æ—Å –Ω–∞ /api/user/profile:', req.body);
  const { userId, lastName, firstName, middleName, phone, email, isEmailVerified } = req.body;

  if (!userId) {
    return res.status(400).json({ error: 'userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω' });
  }

  const deleteQuery = 'DELETE FROM user_profiles WHERE user_id = $1';

  try {
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    await db.query(deleteQuery, [userId]);

    const insertQuery = `
      INSERT INTO user_profiles (user_id, last_name, first_name, middle_name, phone, email, email_verified)
      VALUES ($1, $2, $3, $4, $5, $6, $7)
    `;

    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
    await db.query(insertQuery, [userId, lastName, firstName, middleName, phone, email, isEmailVerified || false]);

    res.json({ message: '–î–∞–Ω–Ω—ã–µ –ø—Ä–æ—Ñ–∏–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã' });
  } catch (err) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:', err);
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è' });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø—Ä–æ—Ñ–∏–ª—è –ø–æ userId
app.get("/api/user/profile/:userId", async (req, res) => {
  const { userId } = req.params;

  if (!userId) {
    return res.status(400).json({ error: "userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
  }

  try {
    const result = await db.query(
      `SELECT last_name, first_name, middle_name, phone, email, email_verified, 
              CASE WHEN (last_name IS NOT NULL AND first_name IS NOT NULL AND 
                        middle_name IS NOT NULL AND phone IS NOT NULL AND 
                        email IS NOT NULL AND email_verified = TRUE) 
                   THEN TRUE 
                   ELSE FALSE 
              END as is_profile_complete
       FROM user_profiles
       WHERE user_id = $1`,
      [userId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: "–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    res.json(result.rows[0]);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–æ—Ñ–∏–ª—è" });
  }
});

// –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ userId
app.get("/api/user/addresses/:userId", async (req, res) => {
  const { userId } = req.params;

  if (!userId) {
    return res.status(400).json({ error: "userId –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω" });
  }

  try {
    const result = await db.query(
      `SELECT city, street, house, apartment, contract_number, account_number
       FROM users
       WHERE user_id = $1`,
      [userId]
    );

    if (result.rows.length === 0) {
      return res.status(404).json({ error: "–ê–¥—Ä–µ—Å–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã" });
    }

    res.json(result.rows);
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∞–¥—Ä–µ—Å–æ–≤:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ‚úÖ –ü–æ–ª—É—á–µ–Ω–∏–µ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –ø–æ–∫–∞–∑–∞–Ω–∏–π
app.get("/api/meter-readings", async (req, res) => {
  const { userId } = req.query;

  if (!userId) {
    return res.status(400).json({ error: "–ù–µ —É–∫–∞–∑–∞–Ω userId" });
  }

  const query = `
    SELECT hot_water, cold_water, electricity, reading_date
    FROM meter_readings
    WHERE user_id = $1
    ORDER BY reading_date DESC
  `;

  try {
    const { rows } = await db.query(query, [userId]);

    if (rows.length === 0) {
      return res.json({
        currentReadings: { hot_water: 0, cold_water: 0, electricity: 0 },
        previousReadings: { hot_water: 0, cold_water: 0, electricity: 0 },
        difference: { hot_water: 0, cold_water: 0, electricity: 0 }
      });
    }

    const grouped = {};
    for (const row of rows) {
      const key = row.reading_date.toISOString().slice(0, 7); // YYYY-MM
      if (!grouped[key]) grouped[key] = row;
    }

    const sortedMonths = Object.keys(grouped).sort().reverse();
    const current = grouped[sortedMonths[0]] || { hot_water: 0, cold_water: 0, electricity: 0 };
    const previous = grouped[sortedMonths[1]] || { hot_water: 0, cold_water: 0, electricity: 0 };

    const difference = {
      hot_water: current.hot_water - previous.hot_water,
      cold_water: current.cold_water - previous.cold_water,
      electricity: current.electricity - previous.electricity
    };

    res.json({ currentReadings: current, previousReadings: previous, difference });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏–π
app.post("/api/meter-readings", async (req, res) => {
  const { userId, hotWater, coldWater, electricity, readingDate } = req.body;

  if (!userId || !readingDate) {
    return res.status(400).json({ error: "–ù–µ —É–∫–∞–∑–∞–Ω userId –∏–ª–∏ –¥–∞—Ç–∞ –ø–æ–∫–∞–∑–∞–Ω–∏–π" });
  }

  const formattedDate = readingDate.substring(0, 7); // YYYY-MM

  try {
    const { rows } = await db.query(`
      SELECT id, reading_date
      FROM meter_readings
      WHERE user_id = $1
      ORDER BY reading_date DESC
    `, [userId]);

    // –£–¥–∞–ª—è–µ–º —Å–∞–º—ã–µ —Å—Ç–∞—Ä—ã–µ, –µ—Å–ª–∏ –±–æ–ª—å—à–µ –¥–≤—É—Ö
    if (rows.length >= 2) {
      const oldestId = rows[rows.length - 1].id;
      await db.query(`DELETE FROM meter_readings WHERE id = $1`, [oldestId]);
      console.log("üóë –°—Ç–∞—Ä—ã–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã");
    }

    const existing = rows.find(r => r.reading_date.toISOString().substring(0, 7) === formattedDate);

    if (existing) {
      await db.query(`
        UPDATE meter_readings
        SET hot_water = $1, cold_water = $2, electricity = $3, reading_date = $4
        WHERE id = $5
      `, [hotWater, coldWater, electricity, readingDate, existing.id]);

      return res.json({ success: true, message: "–ü–æ–∫–∞–∑–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω—ã" });
    } else {
      await db.query(`
        INSERT INTO meter_readings (user_id, hot_water, cold_water, electricity, reading_date)
        VALUES ($1, $2, $3, $4, $5)
      `, [userId, hotWater, coldWater, electricity, readingDate]);

      return res.json({ success: true, message: "–ü–æ–∫–∞–∑–∞–Ω–∏—è –¥–æ–±–∞–≤–ª–µ–Ω—ã" });
    }
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –ø–æ–∫–∞–∑–∞–Ω–∏–π:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.get("/api/calculate-payment", async (req, res) => {
  const { userId, selectedServices } = req.query;

  if (!userId || !selectedServices) {
    return res.status(400).json({ error: "–ù–µ —É–∫–∞–∑–∞–Ω userId –∏–ª–∏ –≤—ã–±—Ä–∞–Ω–Ω—ã–µ —É—Å–ª—É–≥–∏" });
  }

  const selectedServicesArray = selectedServices.split(",").map(s => s.trim()).filter(Boolean);
  let totalAmount = 0;

  const tariffs = {
    heating: 500,
    maintenance: 300,
    hot_water: 17.51,
    cold_water: 80.69,
    electricity: 4.70
  };

  if (selectedServicesArray.includes("heating")) totalAmount += tariffs.heating;
  if (selectedServicesArray.includes("maintenance")) totalAmount += tariffs.maintenance;

  try {
    const paidRes = await db.query(
      `SELECT reading_date FROM paid_services WHERE user_id = $1`,
      [userId]
    );
    const paidMonths = paidRes.rows.map(row => row.reading_date.toISOString().slice(0, 7));

    const readingsRes = await db.query(
      `SELECT hot_water, cold_water, electricity, reading_date
       FROM meter_readings
       WHERE user_id = $1
       ORDER BY reading_date DESC
       LIMIT 2`,
      [userId]
    );

    const results = readingsRes.rows;

    if (results.length === 0) {
      return res.json({
        totalAmount: totalAmount.toFixed(2),
        paidMonths,
        warning: "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–µ–¥—ã–¥—É—â–∏—Ö –ø–æ–∫–∞–∑–∞–Ω–∏—è—Ö"
      });
    }

    const current = results[0];
    const previous = results[1] || { hot_water: 0, cold_water: 0, electricity: 0 };

    const consumption = {
      hot_water: Math.max(parseFloat(current.hot_water) - parseFloat(previous.hot_water), 0),
      cold_water: Math.max(parseFloat(current.cold_water) - parseFloat(previous.cold_water), 0),
      electricity: Math.max(parseFloat(current.electricity) - parseFloat(previous.electricity), 0)
    };

    if (selectedServicesArray.includes("hot_water")) totalAmount += consumption.hot_water * tariffs.hot_water;
    if (selectedServicesArray.includes("cold_water")) totalAmount += consumption.cold_water * tariffs.cold_water;
    if (selectedServicesArray.includes("electricity")) totalAmount += consumption.electricity * tariffs.electricity;

    res.json({
      totalAmount: totalAmount.toFixed(2),
      paidMonths,
      details: {
        heating: selectedServicesArray.includes("heating") ? tariffs.heating : 0,
        maintenance: selectedServicesArray.includes("maintenance") ? tariffs.maintenance : 0,
        hot_water: selectedServicesArray.includes("hot_water") ? consumption.hot_water * tariffs.hot_water : 0,
        cold_water: selectedServicesArray.includes("cold_water") ? consumption.cold_water * tariffs.cold_water : 0,
        electricity: selectedServicesArray.includes("electricity") ? consumption.electricity * tariffs.electricity : 0
      }
    });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–∞—Å—á–µ—Ç–µ –ø–ª–∞—Ç–µ–∂–∞:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

app.post("/api/payments", async (req, res) => {
  const { userId, readingDate, services, totalAmount, paymentMethod } = req.body;

  if (!userId || !readingDate || !services || services.length === 0 || !totalAmount || !paymentMethod) {
    return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
  }

  // –ò–∑–≤–ª–µ–∫–∞–µ–º –º–µ—Å—è—Ü –∏–∑ –¥–∞—Ç—ã –≤ —Ñ–æ—Ä–º–∞—Ç–µ 'YYYY-MM-DD HH:mm:ss.SSS'
  const monthStr = readingDate.slice(0, 7); // 'YYYY-MM'

  try {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞, –µ—Å–ª–∏ –æ–ø–ª–∞—Ç–∞ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü —É–∂–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞
    const checkQuery = `
      SELECT 1 FROM paid_services 
      WHERE user_id = $1 AND to_char(reading_date, 'YYYY-MM') = $2
    `;
    const checkRes = await db.query(checkQuery, [userId, monthStr]);

    if (checkRes.rows.length > 0) {
      return res.status(400).json({ error: "–û–ø–ª–∞—Ç–∞ –∑–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü —É–∂–µ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞" });
    }

    // –í—Å—Ç–∞–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ–ø–ª–∞—Ç–µ
    const insertQuery = `
      INSERT INTO paid_services (user_id, reading_date, services, sum, payment_method)
      VALUES ($1, $2, $3, $4, $5)
    `;
    await db.query(insertQuery, [userId, readingDate, JSON.stringify(services), totalAmount, paymentMethod]);

    res.json({ success: true, message: "–û–ø–ª–∞—Ç–∞ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞" });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø–∏—Å–∏ –æ–ø–ª–∞—Ç—ã:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ–ø–ª–∞—Ç—ã" });
  }
});

app.post("/api/save-payment", async (req, res) => {
  const { userId, selectedMonth, selectedServices, totalAmount, paymentMethod } = req.body;

  if (!userId || !selectedMonth || !selectedServices || totalAmount === undefined || !paymentMethod) {
    return res.status(400).json({ error: "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ" });
  }

  const readingDate = new Date().toISOString().slice(0, 19).replace('T', ' ');
  const currentDate = readingDate;

  const coldWaterAmount = selectedServices.includes("cold_water") ? totalAmount * 0.2 : 0;
  const hotWaterAmount = selectedServices.includes("hot_water") ? totalAmount * 0.3 : 0;
  const electricityAmount = selectedServices.includes("electricity") ? totalAmount * 0.5 : 0;

  try {
    const insertQuery = `
      INSERT INTO paid_services 
      (user_id, cold_water, hot_water, electricity, reading_date, sum, created_at)
      VALUES ($1, $2, $3, $4, $5, $6, $7)
    `;
    await db.query(insertQuery, [
      userId,
      coldWaterAmount,
      hotWaterAmount,
      electricityAmount,
      readingDate,
      totalAmount,
      currentDate
    ]);

    res.json({ success: true });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ –ë–î:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ–ø–ª–∞—Ç—ã" });
  }
});

app.get("/api/paid-months", async (req, res) => {
  const { userId } = req.query;

  if (!userId) {
    return res.status(400).json({ error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" });
  }

  try {
    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –º–µ—Å—è—Ü—ã —Å –ø–æ–∫–∞–∑–∞–Ω–∏—è–º–∏ —Å—á–µ—Ç—á–∏–∫–æ–≤
    const readingsQuery = `
      SELECT DISTINCT to_char(reading_date, 'YYYY-MM') AS reading_month
      FROM meter_readings
      WHERE user_id = $1
      ORDER BY reading_month DESC
    `;
    const { rows: readingsRows } = await db.query(readingsQuery, [userId]);
    const readingMonths = readingsRows.map(row => row.reading_month);

    // –ò–∑–≤–ª–µ–∫–∞–µ–º –≤—Å–µ –º–µ—Å—è—Ü—ã, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∞ –ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∞ –æ–ø–ª–∞—Ç–∞
    const paidQuery = `
      SELECT DISTINCT to_char(reading_date, 'YYYY-MM') AS paid_month
      FROM paid_services
      WHERE user_id = $1
      ORDER BY paid_month DESC
    `;
    const { rows: paidRows } = await db.query(paidQuery, [userId]);
    const paidMonths = paidRows.map(row => row.paid_month);

    // –ù–∞—Ö–æ–¥–∏–º –º–µ—Å—è—Ü—ã, –∑–∞ –∫–æ—Ç–æ—Ä—ã–µ –Ω–µ—Ç –æ–ø–ª–∞—Ç—ã
    const unpaidMonths = readingMonths.filter(month => !paidMonths.includes(month));

    if (unpaidMonths.length === 0) {
      return res.json({ message: "–í—Å–µ –º–µ—Å—è—Ü—ã –æ–ø–ª–∞—á–µ–Ω—ã" });
    }

    res.json({ unpaidMonths });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –º–µ—Å—è—Ü–µ–≤:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö" });
  }
});

// API –¥–ª—è –ø–æ–¥–∞—á–∏ –∑–∞—è–≤–∫–∏
app.post("/api/applications2", async (req, res) => {
  const { type, description, date, time, phone } = req.body;

  console.log("–ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∑–∞—è–≤–∫–∏:", req.body);

  if (!description) {
    return res.status(400).json({ message: "–û–ø–∏—Å–∞–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ" });
  }

  const sql = `
    INSERT INTO Applications2 (type, description, date, time, phone)
    VALUES ($1, $2, $3, $4, $5) RETURNING id
  `;
  const params = [type, description, date, time, phone];

  console.log("–ó–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö:", sql);
  console.log("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞:", params);

  try {
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö PostgreSQL
    const result = await db.query(sql, params);
    const applicationId = result.rows[0].id;

    console.log("‚úÖ –ó–∞—è–≤–∫–∞ —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å–∞–Ω–∞ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö, ID –∑–∞—è–≤–∫–∏:", applicationId);
    res.json({ message: "–ó–∞—è–≤–∫–∞ –ø—Ä–∏–Ω—è—Ç–∞!" });

    const notifyEmail = process.env.NOTIFY_EMAIL;

    if (!notifyEmail) {
      console.error("‚ùå –ù–µ –∑–∞–¥–∞–Ω email –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (NOTIFY_EMAIL)");
      return;
    }

    const typeLabels = {
      plumbing: "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞",
      electrical: "–≠–ª–µ–∫—Ç—Ä–∏–∫–∞",
      construction: "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–∞–±–æ—Ç—ã",
      other: "–î—Ä—É–≥–æ–µ",
    };

    const translatedType = typeLabels[type] || type;

    const mailOptions = {
      from: process.env.SMTP_USER,
      to: notifyEmail,
      subject: "–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç",
      text: `–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç:\n
–¢–∏–ø: ${translatedType}
–û–ø–∏—Å–∞–Ω–∏–µ: ${description}
–î–∞—Ç–∞: ${date || "–Ω–µ —É–∫–∞–∑–∞–Ω–∞"}
–í—Ä–µ–º—è: ${time || "–Ω–µ —É–∫–∞–∑–∞–Ω–æ"}
–¢–µ–ª–µ—Ñ–æ–Ω: ${phone || "–Ω–µ —É–∫–∞–∑–∞–Ω"}\n
–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –∫–ª–∏–µ–Ω—Ç–æ–º.`,
    };

    console.log("–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –æ—Ç–ø—Ä–∞–≤–∫–∏ email:", mailOptions);

    transporter.sendMail(mailOptions, (error, info) => {
      if (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ email:", error);
        return;
      }
      console.log("üì© Email –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω:", info.response);
    });
  } catch (err) {
    console.error("‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø–∏—Å–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:", err);
    return res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞. –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –∑–∞—è–≤–∫—É." });
  }
});

app.post("/api/email/send-code", async (req, res) => {
  const { userId, email } = req.body;
  if (!userId || !email) {
    return res.status(400).json({ error: "userId –∏ email –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  const code = Math.floor(100000 + Math.random() * 900000).toString(); // 6-–∑–Ω–∞—á–Ω—ã–π –∫–æ–¥

  const client = await db.connect();
  try {
    await client.query('BEGIN'); // –ù–∞—á–∏–Ω–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é

    // –í—Å—Ç–∞–≤–∫–∞ –∏–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ —Ç–∞–±–ª–∏—Ü–µ email_verification
    await client.query(`
      INSERT INTO email_verification (user_id, email, code)
      VALUES ($1, $2, $3)
      ON CONFLICT (user_id) DO UPDATE
      SET code = EXCLUDED.code, created_at = CURRENT_TIMESTAMP
    `, [userId, email, code]);

    // –û—Ç–ø—Ä–∞–≤–∫–∞ –ø–∏—Å—å–º–∞
    await transporter.sendMail({
      from: `"Best Yard" <${config.smtp.user}>`,
      to: email,
      subject: "–ö–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è",
      text: `–í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}`,
    });

    await client.query('COMMIT'); // –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é
    res.json({ message: "–ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ email" });
  } catch (err) {
    await client.query('ROLLBACK'); // –û—Ç–∫–∞—Ç—ã–≤–∞–µ–º —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏—é –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ email:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  } finally {
    client.release(); // –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
  }
});

app.post("/api/email/verify", async (req, res) => {
  const { userId, code } = req.body;

  if (!userId || !code) {
    return res.status(400).json({ error: "userId –∏ code –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã" });
  }

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å —Ç–∞–∫–∏–º userId –≤ users
    const userCheck = await db.query(`
      SELECT user_id FROM users WHERE user_id = $1
    `, [userId]);

    if (userCheck.rows.length === 0) {
      return res.status(400).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    // 2. –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–¥–∞ –≤ email_verification
    const result = await db.query(`
      SELECT code, created_at FROM email_verification WHERE user_id = $1
    `, [userId]);

    if (result.rows.length === 0) {
      return res.status(400).json({ error: "–ö–æ–¥ –Ω–µ –Ω–∞–π–¥–µ–Ω" });
    }

    const { code: storedCode, created_at } = result.rows[0];
    const expired = new Date(created_at) < new Date(Date.now() - 10 * 60 * 1000); // 10 –º–∏–Ω—É—Ç

    if (expired) {
      return res.status(400).json({ error: "–ö–æ–¥ –∏—Å—Ç—ë–∫" });
    }

    if (storedCode.trim().toLowerCase() !== code.trim().toLowerCase()) {
      console.log(`–ö–æ–¥ –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç. –í –±–∞–∑–µ: '${storedCode}', –ø—Ä–∏—à—ë–ª: '${code}'`);
      return res.status(400).json({ error: "–ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥" });
    }

    // 3. –û–±–Ω–æ–≤–ª—è–µ–º email_verified –≤ user_profiles, –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞–π–¥–µ–Ω
    const updateResult = await db.query(`
      UPDATE user_profiles SET email_verified = TRUE WHERE user_id = $1 RETURNING email_verified
    `, [userId]);

    if (updateResult.rowCount === 0) {
      console.log("‚ùå UPDATE –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª ‚Äî user_id –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ user_profiles");
      return res.status(400).json({ error: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø—Ä–æ—Ñ–∏–ª–µ" });
    }

    // 4. –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –æ –≤–µ—Ä–∏—Ñ–∏–∫–∞—Ü–∏–∏ –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
    await db.query(`
      DELETE FROM email_verification WHERE user_id = $1
    `, [userId]);

    res.json({ message: "Email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω" });
  } catch (err) {
    console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏ email:", err);
    res.status(500).json({ error: "–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞" });
  }
});

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ (POST)
app.post('/api/user/register', async (req, res) => {
  console.log('–ó–∞–ø—Ä–æ—Å –Ω–∞ /api/user/register:', req.body);
  const { city, street, house, apartment, contract, accountNumber } = req.body;

  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
  if (!city || !street || !house || !contract || !accountNumber) {
    return res.status(400).json({
      error: "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∑–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è."
    });
  }

  const userId = Date.now(); // –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ user_id (–ª—É—á—à–µ UUID)
  const createdAt = moment().format('YYYY-MM-DD HH:mm:ss');

  const client = await db.connect();

  try {
    await client.query('BEGIN');

    const insertUserQuery = `
      INSERT INTO users (
        login_type, contract_number, city, street, house, apartment, account_number, created_at, user_id, is_special_user
      ) VALUES (
        'address', $1, $2, $3, $4, $5, $6, $7, $8, false
      )
    `;

    const userValues = [
      contract,
      city,
      street,
      house,
      apartment || null,
      accountNumber,
      createdAt,
      userId,
    ];

    await client.query(insertUserQuery, userValues);

    const insertProfileQuery = `
      INSERT INTO user_profiles (
        user_id, created_at
      ) VALUES (
        $1, $2
      )
    `;

    const profileValues = [userId, createdAt];

    await client.query(insertProfileQuery, profileValues);

    await client.query('COMMIT');

    res.status(201).json({
      message: "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω",
      userId,
    });
  } catch (err) {
    await client.query('ROLLBACK');
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', err);
    res.status(500).json({
      error: "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.",
    });
  } finally {
    client.release();
  }
});

const buildPath = path.resolve(__dirname, './dist');

app.use(express.static(buildPath));

app.get('*', (req, res) => {
  res.sendFile(path.join(buildPath, 'index.html'));
});

// –°—Ç–∞—Ä—Ç —Å–µ—Ä–≤–µ—Ä–∞
app.listen(config.port, '0.0.0.0', () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${config.port}`);
});
